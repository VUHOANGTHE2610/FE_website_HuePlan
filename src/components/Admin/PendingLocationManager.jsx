import React, { useState, useEffect } from 'react';
import { getAllLocationsFalse, updateLocationStatus } from '../../services/locationService';
import { getAllCategories } from '../../services/categoryService';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const PendingLocationManager = () => {
  const [locations, setLocations] = useState([]);
  const [categories, setCategories] = useState([]);
  const [search, setSearch] = useState('');

  // L·∫•y danh s√°ch lo·∫°i ƒë·ªãa ƒëi·ªÉm
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const data = await getAllCategories();
        setCategories(data);
      } catch (error) {
        toast.error('L·ªói khi t·∫£i danh s√°ch lo·∫°i ƒë·ªãa ƒëi·ªÉm: ' + error.message);
      }
    };
    fetchCategories();
  }, []);

  // L·∫•y danh s√°ch ƒë·ªãa ƒëi·ªÉm ch·ªù duy·ªát
  useEffect(() => {
    fetchLocations();
  }, []);

  const fetchLocations = async () => {
    try {
      const data = await getAllLocationsFalse();
      setLocations(data);
    } catch (error) {
      toast.error(error.message || 'C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu!');
    }
  };

  // X·ª≠ l√Ω duy·ªát ƒë·ªãa ƒëi·ªÉm
  const handleApprove = async (id) => {
    try {
      await updateLocationStatus(id, true);
      toast.success('Duy·ªát ƒë·ªãa ƒëi·ªÉm th√†nh c√¥ng!');
      fetchLocations(); // Refresh danh s√°ch
    } catch (error) {
      toast.error(error.message || 'C√≥ l·ªói x·∫£y ra khi duy·ªát ƒë·ªãa ƒëi·ªÉm!');
    }
  };

  // L·ªçc danh s√°ch theo t√¨m ki·∫øm
  const filteredLocations = locations.filter((loc) =>
    loc.location_Name.toLowerCase().includes(search.toLowerCase())
  );

  // H√†m l·∫•y t√™n lo·∫°i ƒë·ªãa ƒëi·ªÉm t·ª´ category_ID
  const getCategoryName = (categoryId) => {
    if (!categoryId) return 'Ch∆∞a ph√¢n lo·∫°i';
    const category = categories.find(cat => cat.category_ID === categoryId);
    return category ? category.category_Name : 'Ch∆∞a ph√¢n lo·∫°i';
  };

  return (
    <div className="p-4">
      <ToastContainer />
      <h2 className="text-2xl font-bold text-purple-700 mb-4">Qu·∫£n l√Ω ƒë·ªãa ƒëi·ªÉm ch·ªù duy·ªát</h2>

      <div className="mb-4">
        <input
          type="text"
          placeholder="üîç T√¨m theo t√™n ƒë·ªãa ƒëi·ªÉm..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="px-4 py-2 border rounded w-full max-w-md"
        />
      </div>

      <div className="overflow-x-auto">
        <table className="min-w-full bg-white border border-purple-200">
          <thead className="bg-purple-100 text-purple-700">
            <tr>
              <th className="p-2 border">T√™n ƒë·ªãa ƒëi·ªÉm</th>
              <th className="p-2 border">Lo·∫°i ƒë·ªãa ƒëi·ªÉm</th>
              <th className="p-2 border">M√¥ t·∫£</th>
              <th className="p-2 border">ƒê·ªãa ch·ªâ</th>
              <th className="p-2 border">Chi ph√≠</th>
              <th className="p-2 border">Ng∆∞·ªùi t·∫°o</th>
              <th className="p-2 border">H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {filteredLocations.map((loc) => (
              <tr key={loc.location_ID} className="hover:bg-purple-50 transition">
                <td className="p-2 border">{loc.location_Name}</td>
                <td className="p-2 border">{getCategoryName(loc.category_ID)}</td>
                <td className="p-2 border max-w-xs truncate">{loc.location_Description}</td>
                <td className="p-2 border">{loc.location_Address}</td>
                <td className="p-2 border">{loc.location_Cost.toLocaleString()}ƒë</td>
                <td className="p-2 border">{loc.createBy}</td>
                <td className="p-2 border text-center">
                  <button
                    onClick={() => handleApprove(loc.location_ID)}
                    className="text-green-600 hover:text-green-800 font-medium"
                  >
                    ‚úì Duy·ªát
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default PendingLocationManager; 